- name: Deploy microservices on AWS VM
  hosts: all
  become: true
  vars_files:
    - vars.yml

  tasks:

    ### Docker Installation Tasks ###  

    # Task 1: Update apt and install dependencies  
    - name: Install dependencies
      apt:
        pkg:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
        state: present
        update_cache: yes

    - name: Ensure /etc/apt/keyrings exists
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    # Task 2: Ensure Keyring Directory Exists
    - name: Ensure /etc/apt/keyrings exists  
      ansible.builtin.file:  
        path: /etc/apt/keyrings  
        state: directory  
        mode: '0755'  
    
    # Task 3: Add GPG key for Docker
    # Currently, the Docker repository is referencing /etc/apt/keyrings/docker.asc improperly. Update the key installation process to use the .gpg keyring file instead to conform to modern best practices.

    - name: Add GPG key for Docker
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg
    
    # Task 4: Add Docker repository
    # Since Docker hasnâ€™t provided official support for Ubuntu 24.04 (Noble Numbat), We can forcibly "trick" Docker's repository into using the configuration for the latest supported version (e.g., jammy for Ubuntu 22.04).

    - name: Add Docker repository to apt
      ansible.builtin.apt_repository:  
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable"  
        state: present

    # Task 5: Install Docker  
    - name: Install Docker and Docker Compose
      apt:
        pkg:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: latest
        update_cache: yes

    # Task 6: Ensure Docker is running and enabled  
    - name: Ensure Docker is running and enabled
      service:
        name: docker
        state: started
        enabled: yes

    # Task 7: Ensure group "docker" exists  
    - name: Ensure group "docker" exists
      ansible.builtin.group:
        name: docker
        state: present

    # Task 8: Add the ansible user to the Docker group  
    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes

    ### Application Deployment Tasks ###  

    - name: Ensure GitHub is a known host
      known_hosts:
        name: github.com
        key: "{{ lookup('pipe', 'ssh-keyscan -t ed25519 github.com') }}"
        path: /home/ubuntu/.ssh/known_hosts
        state: present

    # Task 8: Clone the Git repository and other setup tasks
    - name: Clone the microservices repository
      git:  
        repo: "{{ repo_url }}"
        dest: "/home/{{ ansible_user }}/energy-solar-micro-service"
        version: "{{ repo_branch }}"
        key_file: /home/ubuntu/.ssh/id_ed25519
        force: yes
    
    - name: Create logs directory
      file:
        path: /home/ubuntu/energy-solar-micro-service/logs
        state: directory
        mode: '0777'

    - name: Create log files for services
      copy:
        content: ""
        dest: "/home/ubuntu/energy-solar-micro-service/logs/{{ item }}"
        mode: '0666'
      loop:
        - receiver.log
        - storage.log
        - analyzer.log
        - processing.log

    - name: Create processing folder if not exists
      file:
        path: /home/ubuntu/energy-solar-micro-service/data/processing
        state: directory
        mode: '0777'

    - name: Create processing.json with default stats
      copy:
        content: |
          {
            "num_energy_events": 0,
            "max_energy_consumed": 0,
            "num_solar_events": 0,
            "max_power_generated": 0,
            "last_updated": "2025-03-25T13:21:58Z"
          }
        dest: /home/ubuntu/energy-solar-micro-service/data/processing/processing.json
        mode: '0666'
    # Ensure the Required SQL Files Are Present
    - name: Copy database initialization script  
      copy:  
        src: ../../data/database/create_tables.sql
        dest: /home/{{ ansible_user }}/energy-solar-micro-service/data/database/create_tables.sql  
        owner: ubuntu  
        group: ubuntu  
        mode: '0644'

    # Task 9: Start the microservices using Docker Compose  
    - name: Start microservices using Docker Compose
      shell: |
        docker compose build
        docker compose up -d
      args:
        chdir: "/home/{{ ansible_user }}/energy-solar-micro-service"


    
    # -----------------------------------------------------------------
    # Clean Up Existing Docker Key Conflicts
    # SSH into an instance and clean up any previous conflicting Docker configurations.
    # Clean up related Docker configurations  
    # sudo rm -rf /etc/apt/keyrings/docker.asc  
    # sudo rm -rf /etc/apt/keyrings/docker.gpg  

    # # Create the keyrings directory again  
    # sudo mkdir -p /etc/apt/keyrings  
    # sudo chmod 755 /etc/apt/keyrings  

    # # Add the correct Docker GPG key  
    # curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg  

    # # Update the repository (use `jammy` codename here explicitly)  
    # echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable" | sudo tee /etc/apt/sources.list.d/docker.list  

    # # Update and check for updates  
    # sudo apt update  
    # sudo apt list -a docker-ce