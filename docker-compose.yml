services:
  zookeeper:
    image: wurstmeister/zookeeper
    volumes: 
      - zookeeper:/opt/zookeeper-3.4.13/data
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    environment:
      KAFKA_CREATE_TOPICS: "energy_consumption:1:1,solar_generation:1:1" # Two topics
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/logs
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/kafka:/kafka/logs
    depends_on:
      - "zookeeper"
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s
  db:  
    image: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456
      MYSQL_USER: huutrung
      MYSQL_PASSWORD: 123456
      MYSQL_DATABASE: lab04_ConfigLogging
    # ports:
    #   - '3306:3306'
    volumes:
      - my-db:/var/lib/mysql
      - ./data/database:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      retries: 5
      start_period: 20s
      timeout: 5s    
  receiver:
    build:
      context: ./receiver
      dockerfile: dockerfile
    ports:
      - "8080"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/logs
      - ./config/receiver:/app/config
  storage:
    build:
      context: ./storage
      dockerfile: dockerfile
    ports:
      - "8090:8090"
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/logs
      - ./config/storage:/app/config
    env_file:
    - .env
  processing:
    build:
      context: processing
      dockerfile: dockerfile
    environment:
      CORS_ALLOW_ALL: no # Change to yes if you want to allow all requests
    ports:
      - "8100"
    depends_on:
      - "storage"
    volumes:
      - ./logs:/logs
      - ./config/processing:/app/config
      - ./data/processing:/app/data
  analyzer:
    build:
      context: ./analyzer
      dockerfile: dockerfile
    environment:
      CORS_ALLOW_ALL: no # Change to yes if you want to allow all requests
    ports:
      - "8110"
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./logs:/logs
      - ./config/analyzer:/app/config
  
  dashboard:
    build:
      # context: ./dashboard
      context: ./dashboard-ui
      dockerfile: dockerfile
    ports:
      - "80:80"
    depends_on:
      - analyzer
      - processing
   
  consistency_check:
    build:
      context: ./consistency_check
      dockerfile: dockerfile
    ports:
      - "8120"
    depends_on:
      - processing
      - analyzer
      - storage
    volumes:
      - ./logs:/logs
      - ./config/consistency_check:/app/config
      - ./data/consistency_check:/app/data    

# Defines a named volume my-db
volumes:
  my-db:
  zookeeper: